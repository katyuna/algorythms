package sort;

import java.util.List;

public class InsertionSort implements Sortable {
    /*Сортировка вставками: смысл алгоритма - разделить массив на две части - отсортированную и нет.
    В самом начале в отсортированной части находится один (первый) элемент. Затем каждый элемент
    из не отсортированной части сравниваем с элементами отсортированной, начиная с конца.
    Как только находится его место, сдвигаем элементы отсортированной части вправо, а на нужное
    место помещаем элемент.
    Асимптотическая сложность: O(n^2).
     */

    List<Integer> array;

    public InsertionSort(List<Integer> array) {
        this.array = array;
    }

    @Override
    public <T extends Comparable<T>> void sortArray(List<T> array) {
        // Предполагаем, что первый элемент уже отсортирован
        for (int i = 1; i < array.size(); i++) {
            T key = array.get(i); // Элемент, который нужно вставить в отсортированную часть
            int j = i - 1; // Индекс последнего элемента в отсортированной части

            // Сравниваем элементы, используя метод compareTo
            while (j >= 0 && array.get(j).compareTo(key) > 0) {
                array.set(j + 1, array.get(j)); // Сдвигаем элемент вправо, если он больше ключа
                j = j - 1; // Переходим к предыдущему элементу в отсортированной части
            }
            array.set(j + 1, key); // Вставить key на место j+1
        }
    }
}
