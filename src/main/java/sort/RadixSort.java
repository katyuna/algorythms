package sort;

import java.util.Arrays;
import java.util.List;

public class RadixSort implements Sortable {
    /*Поразрядная сортировка: смысл алгоритма - сначала сортируем по единицам, потом по десяткам, потом по сотням и т.д
    Асимптотическая сложность О(n), но требуется дополнительная память для хранения счетчика.
    Эффективен для сортировки чисел и строк фиксированной длины.
    При этом должен быть известен размер алфавита.
    Размер счетчика равен размеру алфавита.
    Пример: Допустим все числа в массиве в диапазоне от 0 до 999. Т.е. 3 разряда: единицы, десятки, сотни. При этом известно, что в каждом разряде может быть цифра от 0 до 9.
    Если строки, то разрядность - количество букв, размер алфавита = количество букв в алфавите.
     */
    List<Integer> array;

    public RadixSort(List<Integer> array) {
        this.array = array;
    }

    @Override

    public <T extends Comparable<T>> void sortArray(List<T> array) {
        int[] counter = new int[10];
        Arrays.fill(counter, 0);
        /*Начинаем с самого младшего разряда и посчитаем сколько раз каждая цифра встречается в разряде.
        Запишем в счетчик количество нулей - в позицию 0, количество единиц - 1 и т.д., девяток в позицию 9.
        */



        for (int i = 0; i < array.size(); i++){
            //Получаем цифру в разряде единиц путем нахождения остатка от деления
            Integer digit = (Integer) array.get(i) % 10;
            //Увеличиваем соответсвующую позицию в счетчике
            counter[digit]++;
        }
        for (int i = 0; i < counter.length; i++){
            System.out.print(counter[i] + " ");
        }


    }
}
